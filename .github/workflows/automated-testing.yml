name: Test

on:
  push:
    branches: [ develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  setup-services:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_MULTIPLE_DATABASES: auth_test,task_test,notification_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Maven Dependency Cache
        id: maven-cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Install parent POM
        run: mvn -B install -DskipTests
    
    outputs:
      maven-cache-hit: ${{ steps.maven-cache.outputs.cache-hit }}

  test-discovery-server:
    needs: setup-services
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Maven Dependency Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Test Discovery Server
        run: cd discovery-server && mvn -B test
      
      - name: Generate Test Report
        if: always()
        run: cd discovery-server && mvn surefire-report:report-only
      
      - name: Upload Discovery Server Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: discovery-server-test-reports
          path: |
            discovery-server/target/site/surefire-report.html
            discovery-server/target/surefire-reports
          if-no-files-found: warn

  test-api-gateway:
    needs: setup-services
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Maven Dependency Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Test API Gateway
        run: cd api-gateway && mvn -B test
      
      - name: Generate Test Report
        if: always()
        run: cd api-gateway && mvn surefire-report:report-only
      
      - name: Upload API Gateway Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: api-gateway-test-reports
          path: |
            api-gateway/target/site/surefire-report.html
            api-gateway/target/surefire-reports
          if-no-files-found: warn

  test-auth-service:
    needs: setup-services
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: auth_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Maven Dependency Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Test Auth Service
        run: cd auth-service && mvn -B test
      
      - name: Generate Test Report
        if: always()
        run: cd auth-service && mvn surefire-report:report-only
      
      - name: Upload Auth Service Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: auth-service-test-reports
          path: |
            auth-service/target/site/surefire-report.html
            auth-service/target/surefire-reports
          if-no-files-found: warn

  test-task-service:
    needs: setup-services
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: task_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Maven Dependency Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Test Task Service
        run: cd task-service && mvn -B test
      
      - name: Generate Test Report
        if: always()
        run: cd task-service && mvn surefire-report:report-only
      
      - name: Upload Task Service Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: task-service-test-reports
          path: |
            task-service/target/site/surefire-report.html
            task-service/target/surefire-reports
          if-no-files-found: warn

  test-notification-service:
    needs: setup-services
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: notification_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Maven Dependency Cache
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      - name: Test Notification Service
        run: cd notification-service && mvn -B test
      
      - name: Generate Test Report
        if: always()
        run: cd notification-service && mvn surefire-report:report-only
      
      - name: Upload Notification Service Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: notification-service-test-reports
          path: |
            notification-service/target/site/surefire-report.html
            notification-service/target/surefire-reports
          if-no-files-found: warn

    aggregate-reports:
    needs: [test-discovery-server, test-api-gateway, test-auth-service, test-task-service, test-notification-service]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Create Reports Directory
        run: mkdir -p .github/test-reports/summary .github/test-reports/xml
      
      - name: Download Discovery Server Reports
        uses: actions/download-artifact@v4
        with:
          name: discovery-server-test-reports
          path: discovery-server-reports
        continue-on-error: true
      
      - name: Download API Gateway Reports
        uses: actions/download-artifact@v4
        with:
          name: api-gateway-test-reports
          path: api-gateway-reports
        continue-on-error: true
      
      - name: Download Auth Service Reports
        uses: actions/download-artifact@v4
        with:
          name: auth-service-test-reports
          path: auth-service-reports
        continue-on-error: true
      
      - name: Download Task Service Reports
        uses: actions/download-artifact@v4
        with:
          name: task-service-test-reports
          path: task-service-reports
        continue-on-error: true
      
      - name: Download Notification Service Reports
        uses: actions/download-artifact@v4
        with:
          name: notification-service-test-reports
          path: notification-service-reports
        continue-on-error: true
      
      - name: Generate Text Summaries
        run: |
          # Create directory for summary reports
          mkdir -p .github/test-reports/summary
          
          # Function to extract test summary from XML
          extract_summary() {
            local service=$1
            local report_dir=$2
            local output_file=".github/test-reports/summary/${service}.txt"
            
            echo "Test Summary for ${service}" > "${output_file}"
            echo "=============================" >> "${output_file}"
            echo "" >> "${output_file}"
            
            if [ -d "${report_dir}/surefire-reports" ]; then
              # Get total tests, failures, errors
              local total_tests=0
              local total_failures=0
              local total_errors=0
              local total_skipped=0
              
              for xml_file in ${report_dir}/surefire-reports/*.xml; do
                if [ -f "$xml_file" ]; then
                  # Get test counts
                  local tests=$(grep -o 'tests="[0-9]*"' "$xml_file" | head -1 | cut -d'"' -f2)
                  local failures=$(grep -o 'failures="[0-9]*"' "$xml_file" | head -1 | cut -d'"' -f2)
                  local errors=$(grep -o 'errors="[0-9]*"' "$xml_file" | head -1 | cut -d'"' -f2)
                  local skipped=$(grep -o 'skipped="[0-9]*"' "$xml_file" | head -1 | cut -d'"' -f2)
                  
                  # Add to totals
                  total_tests=$((total_tests + tests))
                  total_failures=$((total_failures + failures))
                  total_errors=$((total_errors + errors))
                  total_skipped=$((total_skipped + skipped))
                  
                  # Extract class name
                  local classname=$(grep -o 'classname="[^"]*"' "$xml_file" | head -1 | cut -d'"' -f2)
                  echo "Class: $classname" >> "${output_file}"
                  echo "  Tests: $tests, Failures: $failures, Errors: $errors, Skipped: $skipped" >> "${output_file}"
                  
                  # Extract failure details if any
                  if [ "$failures" -gt 0 ] || [ "$errors" -gt 0 ]; then
                    echo "  Failures/Errors:" >> "${output_file}"
                    grep -A 3 "<failure" "$xml_file" | sed 's/<.*>//g' | grep -v "^--$" | sed 's/^/    /' >> "${output_file}"
                    grep -A 3 "<error" "$xml_file" | sed 's/<.*>//g' | grep -v "^--$" | sed 's/^/    /' >> "${output_file}"
                  fi
                  echo "" >> "${output_file}"
                fi
              done
              
              # Add summary
              echo "Summary:" >> "${output_file}"
              echo "  Total Tests: $total_tests" >> "${output_file}"
              echo "  Failures: $total_failures" >> "${output_file}"
              echo "  Errors: $total_errors" >> "${output_file}"
              echo "  Skipped: $total_skipped" >> "${output_file}"
              echo "  Pass Rate: $((100 * (total_tests - total_failures - total_errors) / total_tests))%" >> "${output_file}"
            else
              echo "No test reports found for ${service}" >> "${output_file}"
            fi
          }
          
          # Generate summaries for each service
          extract_summary "discovery-server" "discovery-server-reports"
          extract_summary "api-gateway" "api-gateway-reports"
          extract_summary "auth-service" "auth-service-reports"
          extract_summary "task-service" "task-service-reports"
          extract_summary "notification-service" "notification-service-reports"
          
          # Create combined summary
          cat .github/test-reports/summary/*.txt > .github/test-reports/summary.txt
      
      - name: Store XML Reports
        run: |
          # XML reports
          mkdir -p .github/test-reports/xml/discovery-server
          mkdir -p .github/test-reports/xml/api-gateway
          mkdir -p .github/test-reports/xml/auth-service
          mkdir -p .github/test-reports/xml/task-service
          mkdir -p .github/test-reports/xml/notification-service
          
          # Copy XML reports for reference
          cp -r discovery-server-reports/surefire-reports/* .github/test-reports/xml/discovery-server/ || true
          cp -r api-gateway-reports/surefire-reports/* .github/test-reports/xml/api-gateway/ || true
          cp -r auth-service-reports/surefire-reports/* .github/test-reports/xml/auth-service/ || true
          cp -r task-service-reports/surefire-reports/* .github/test-reports/xml/task-service/ || true
          cp -r notification-service-reports/surefire-reports/* .github/test-reports/xml/notification-service/ || true
      
      - name: List Collected Reports
        run: |
          echo "Summary Reports:"
          find .github/test-reports/summary -type f | sort
          echo "Contents of summary.txt:"
          cat .github/test-reports/summary.txt
          echo "XML Reports (for reference):"
          find .github/test-reports/xml -type f | sort
      
      - name: Create GitHub Workflow Summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Tests | Failures | Errors | Skipped | Pass Rate |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|----------|--------|---------|-----------|" >> $GITHUB_STEP_SUMMARY
          
          # Function to extract summary data for workflow summary
          extract_workflow_summary() {
            local service=$1
            local report_dir=$2
            
            local total_tests=0
            local total_failures=0
            local total_errors=0
            local total_skipped=0
            local pass_rate="N/A"
            
            # Try to find the summary data
            for xml_file in ${report_dir}/surefire-reports/*.xml; do
              if [ -f "$xml_file" ]; then
                # Get test counts
                local tests=$(grep -o 'tests="[0-9]*"' "$xml_file" | head -1 | cut -d'"' -f2)
                local failures=$(grep -o 'failures="[0-9]*"' "$xml_file" | head -1 | cut -d'"' -f2)
                local errors=$(grep -o 'errors="[0-9]*"' "$xml_file" | head -1 | cut -d'"' -f2)
                local skipped=$(grep -o 'skipped="[0-9]*"' "$xml_file" | head -1 | cut -d'"' -f2)
                
                # Add to totals
                total_tests=$((total_tests + tests))
                total_failures=$((total_failures + failures))
                total_errors=$((total_errors + errors))
                total_skipped=$((total_skipped + skipped))
              fi
            done
            
            # Calculate pass rate if there were tests
            if [ "$total_tests" -gt 0 ]; then
              pass_rate="$((100 * (total_tests - total_failures - total_errors) / total_tests))%"
            fi
            
            # Add row to summary table
            echo "| $service | $total_tests | $total_failures | $total_errors | $total_skipped | $pass_rate |" >> $GITHUB_STEP_SUMMARY
          }
          
          # Add each service to the workflow summary
          extract_workflow_summary "Discovery Server" "discovery-server-reports"
          extract_workflow_summary "API Gateway" "api-gateway-reports"
          extract_workflow_summary "Auth Service" "auth-service-reports"
          extract_workflow_summary "Task Service" "task-service-reports"
          extract_workflow_summary "Notification Service" "notification-service-reports"
      
      - name: Upload Consolidated Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-reports
          path: .github/test-reports
          if-no-files-found: warn