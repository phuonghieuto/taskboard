name: Staging Release to Docker Hub

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    # Install parent POM for later jobs
    - name: Install parent POM
      run: mvn -B install -DskipTests

  # Individual service jobs
  build-discovery-server:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Test Discovery Server
      run: cd discovery-server && mvn -B clean package
    
    - name: Build and Push Discovery Server Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/discovery-server:latest -t ${{ secrets.DOCKER_USERNAME }}/discovery-server:dev ./discovery-server
        docker push ${{ secrets.DOCKER_USERNAME }}/discovery-server:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/discovery-server:dev

  build-api-gateway:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Test API Gateway
      run: cd api-gateway && mvn -B clean package
    
    - name: Build and Push API Gateway Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest -t ${{ secrets.DOCKER_USERNAME }}/api-gateway:dev ./api-gateway
        docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/api-gateway:dev

  build-auth-service:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Test Auth Service
      run: cd auth-service && mvn -B clean package
    
    - name: Build and Push Auth Service Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/auth-service:latest -t ${{ secrets.DOCKER_USERNAME }}/auth-service:dev ./auth-service
        docker push ${{ secrets.DOCKER_USERNAME }}/auth-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/auth-service:dev

  build-task-service:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Test Task Service
      run: cd task-service && mvn -B clean package
    
    - name: Build and Push Task Service Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/task-service:latest -t ${{ secrets.DOCKER_USERNAME }}/task-service:dev ./task-service
        docker push ${{ secrets.DOCKER_USERNAME }}/task-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/task-service:dev

  build-notification-service:
    needs: setup
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Test Notification Service
      run: cd notification-service && mvn -B clean package
    
    - name: Build and Push Notification Service Image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/notification-service:latest -t ${{ secrets.DOCKER_USERNAME }}/notification-service:dev ./notification-service
        docker push ${{ secrets.DOCKER_USERNAME }}/notification-service:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/notification-service:dev

  create-tag:
    needs: [build-discovery-server, build-api-gateway, build-auth-service, build-task-service, build-notification-service]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Development Deployment Tag
      uses: actions/github-script@v7
      with:
        script: |
          const { repo, owner } = context.repo;
          const sha = context.sha;
          const shortSha = sha.substring(0, 8);
          const tagName = `dev-${shortSha}`;
          
          github.rest.git.createRef({
            owner,
            repo,
            ref: `refs/tags/${tagName}`,
            sha
          }).catch(e => {
            console.log(`Tag ${tagName} already exists or other error: ${e}`);
          });
          
          console.log(`Created tag: ${tagName}`);