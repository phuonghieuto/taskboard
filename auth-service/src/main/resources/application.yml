spring:
  application:
    name: auth-service
  datasource:
    url: jdbc:postgresql://${POSTGRES_URL}:5432/${USER_DB}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate.format_sql: true
      hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
  security:
    oauth2:
      client:
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://www.googleapis.com/oauth2/v4/token
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          github:
            authorization-uri: https://github.com/login/oauth/authorize
            token-uri: https://github.com/login/oauth/access_token
            user-info-uri: https://api.github.com/user
            user-name-attribute: id
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/api/v1/login/oauth2/code/google
            # redirect-uri: "{baseUrl}/login/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          github:
            client-id: ${GITHUB_CLIENT_ID}
            client-secret: ${GITHUB_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/api/v1/login/oauth2/code/github
            # redirect-uri: "{baseUrl}/login/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
  zipkin:
    baseUrl: http://zipkin:9411
    sender:
      type: web
  sleuth:
    sampler:
      probability: 1.0
    integration:
      enabled: true
    scheduled:
      enabled: true
logging:
  file:
    name: src/main/resources/script/stage_log.log
  level:
    org:
      hibernate:
        SQL: OFF
      springframework:
        web: DEBUG
        data: DEBUG
        boot:
          autoconfigure:
            data:
              rest: DEBUG
            orm: DEBUG
        security: DEBUG
server:
  port: 8081
  servlet:
    context-path: /api/v1
  forward-headers-strategy: framework

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
  instance:
    hostname: ${SERVICE_HOST:localhost}
    non-secure-port: ${SERVICE_PORT:8081}
    prefer-ip-address: true

springdoc:
  api-docs:
    path: /auth/api-docs
  swagger-ui:
    path: /swagger-ui.html
openapi:
  service:
    title: Auth Service API Documentation
    version: 1.0.0
    url: http://localhost:8080 # API Gateway URL

# App properties
app:
  oauth2:
    # Use a comma-separated string instead of a list
    authorizedRedirectUrisString: "http://localhost:8080/api/v1/oauth2/redirect,http://localhost:8081/api/v1/oauth2/redirect"

auth:
  keys:
    public-key-path: ${AUTH_PUBLIC_KEY_PATH}
    private-key-path: ${AUTH_PRIVATE_KEY_PATH}

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,env,mappings
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
    prometheus:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
    distribution:
      percentiles-histogram:
        http.server.requests: true
  tracing:
    sampling:
      probability: 1.0
  prometheus:
    metrics:
      export:
        enabled: true
